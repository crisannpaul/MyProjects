{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\user-chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './styles.css';\nimport { getChatHistory } from \"./chat-api\";\nimport messageItem from \"./message-item\";\n\nvar UserChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserChatWindow, _React$Component);\n\n  function UserChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, UserChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserChatWindow).call(this, props));\n\n    _this.handleIncomingMessage = function (newMessage) {\n      if (newMessage.receiver === _this.state.sender) {\n        if (newMessage.type === \"TYPING\") {\n          // Handle typing notification\n          // For example, set a state to show the typing indicator in the UI\n          _this.setState({\n            otherUserIsTyping: true\n          }); // Optionally, use a timeout to hide the typing indicator after a short period\n\n\n          clearTimeout(_this.typingTimeout);\n          _this.typingTimeout = setTimeout(function () {\n            _this.setState({\n              otherUserIsTyping: false\n            });\n          }, 3000); // Hide typing indicator after 3 seconds of inactivity\n        } else {\n          // Handle regular chat messages\n          var isOwnMessage = newMessage.sender === _this.state.sender;\n\n          var formattedMessage = _objectSpread({}, newMessage, {\n            isOwnMessage: isOwnMessage\n          });\n\n          _this.setState(function (prevState) {\n            return {\n              messages: [].concat(_toConsumableArray(prevState.messages), [formattedMessage])\n            };\n          });\n        }\n\n        console.log(_this.state.messages);\n      }\n    };\n\n    _this.sendMessage = function (messageContent) {\n      var _this$state = _this.state,\n          stompClient = _this$state.stompClient,\n          sender = _this$state.sender;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          type: \"CHAT\",\n          content: messageContent,\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n\n        _this.handleIncomingMessage(chatMessage);\n\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.sendTyping = function () {\n      var _this$state2 = _this.state,\n          stompClient = _this$state2.stompClient,\n          sender = _this$state2.sender;\n\n      if (stompClient && stompClient.connected) {\n        var typingMessage = {\n          type: \"TYPING\",\n          content: '',\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: [],\n      sender: props.sender,\n      receiver: 'admin',\n      otherUserIsTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(UserChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        }); // Subscribe to receive messages\n\n\n        client.subscribe(\"/topic/users/\".concat(_this2.state.sender), function (message) {\n          console.log(message);\n          var newMessage = JSON.parse(message.body);\n\n          _this2.handleIncomingMessage(newMessage);\n        });\n      });\n      getChatHistory(this.state.sender, this.state.receiver, function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n          var formattedMessages = result.map(function (message) {\n            return _objectSpread({}, message, {\n              isOwnMessage: message.sender === _this2.state.sender\n            });\n          });\n\n          _this2.setState({\n            messages: formattedMessages\n          });\n        } else {// Handle errors or no response\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var messages = this.state.messages;\n      return React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: this.state.receiver,\n        isTyping: this.state.otherUserIsTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), \"/>\", React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        onChange: this.sendTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserChatWindow;\n}(React.Component);\n\nexport default UserChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\user-chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","getChatHistory","messageItem","UserChatWindow","props","handleIncomingMessage","newMessage","receiver","state","sender","type","setState","otherUserIsTyping","clearTimeout","typingTimeout","setTimeout","isOwnMessage","formattedMessage","prevState","messages","console","log","sendMessage","messageContent","stompClient","connected","chatMessage","content","send","JSON","stringify","sendTyping","typingMessage","socket","client","over","connect","subscribe","message","parse","body","result","status","err","formattedMessages","map","disconnect","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport './styles.css'\r\nimport {getChatHistory} from \"./chat-api\";\r\nimport messageItem from \"./message-item\";\r\n\r\n\r\nclass UserChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n            sender: props.sender,\r\n            receiver: 'admin',\r\n            otherUserIsTyping: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            // Subscribe to receive messages\r\n            client.subscribe(`/topic/users/${this.state.sender}`, (message) => {\r\n                console.log(message)\r\n                const newMessage = JSON.parse(message.body);\r\n                this.handleIncomingMessage(newMessage)\r\n            });\r\n        });\r\n\r\n        getChatHistory(this.state.sender, this.state.receiver, (result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                console.log(result);\r\n\r\n                const formattedMessages = result.map(message => ({\r\n                    ...message,\r\n                    isOwnMessage: message.sender === this.state.sender\r\n                }));\r\n\r\n                this.setState({ messages: formattedMessages });\r\n            } else {\r\n                // Handle errors or no response\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    handleIncomingMessage = (newMessage) => {\r\n        if (newMessage.receiver === this.state.sender) {\r\n            if (newMessage.type === \"TYPING\") {\r\n                // Handle typing notification\r\n                // For example, set a state to show the typing indicator in the UI\r\n                this.setState({otherUserIsTyping: true});\r\n\r\n                // Optionally, use a timeout to hide the typing indicator after a short period\r\n                clearTimeout(this.typingTimeout);\r\n                this.typingTimeout = setTimeout(() => {\r\n                    this.setState({otherUserIsTyping: false});\r\n                }, 3000); // Hide typing indicator after 3 seconds of inactivity\r\n\r\n            } else {\r\n                // Handle regular chat messages\r\n                const isOwnMessage = newMessage.sender === this.state.sender;\r\n\r\n                const formattedMessage = {\r\n                    ...newMessage,\r\n                    isOwnMessage: isOwnMessage\r\n                };\r\n\r\n                this.setState(prevState => ({\r\n                    messages: [...prevState.messages, formattedMessage]\r\n                }));\r\n            }\r\n            console.log(this.state.messages);\r\n        }\r\n    };\r\n\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient, sender } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = {\r\n                type: \"CHAT\",\r\n                content: messageContent,\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            this.handleIncomingMessage(chatMessage)\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    sendTyping = () => {\r\n        const { stompClient, sender } = this.state;\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            const typingMessage = {\r\n                type: \"TYPING\",\r\n                content: '',\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { messages } = this.state;\r\n\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatHeader chatWith={this.state.receiver} isTyping={this.state.otherUserIsTyping}/>/>\r\n                <MessageList messages={messages} />\r\n                <ChatInput onSendMessage={this.sendMessage} onChange={this.sendTyping}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserChatWindow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}