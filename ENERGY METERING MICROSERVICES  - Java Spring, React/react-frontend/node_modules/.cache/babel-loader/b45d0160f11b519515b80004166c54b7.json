{"ast":null,"code":"import _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\person\\\\components\\\\em-management\\\\em-management-container.js\";\nimport React from 'react';\nimport APIResponseErrorMessage from '../../../commons/errorhandling/api-response-error-message';\nimport { Button, Card, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport UpdateEmForm from \"./update-em-form\";\nimport * as API_EM from '../../api/em-api';\nimport AddEmForm from './add-em-form';\nimport DeleteEmForm from './delete-em-form';\nimport EnergyMeterTable from './em-table';\nimport MapUserEmForm from './map-user-em-form';\nimport UnmapUserEmForm from './unmap-user-em-form';\nvar textStyle = {\n  color: 'black',\n  textDecoration: 'none'\n};\n\nvar EmManagementContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EmManagementContainer, _React$Component);\n\n  function EmManagementContainer(props) {\n    var _this;\n\n    _classCallCheck(this, EmManagementContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EmManagementContainer).call(this, props));\n    _this.toggleAddForm = _this.toggleAddForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleUpdateForm = _this.toggleUpdateForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleDeleteForm = _this.toggleDeleteForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleMapUserForm = _this.toggleMapUserForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleUnmapUserForm = _this.toggleUnmapUserForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reload = _this.reload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      addFormSelected: false,\n      updateFormSelected: false,\n      deleteFormSelected: false,\n      mapUserFormSelected: false,\n      unmapUserFormSelected: false,\n      collapseForm: false,\n      tableData: [],\n      isLoaded: false,\n      errorStatus: 0,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(EmManagementContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchEnergyMeters();\n    }\n  }, {\n    key: \"fetchEnergyMeters\",\n    value: function fetchEnergyMeters() {\n      var _this2 = this;\n\n      return API_EM.getEnergyMeters(function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n\n          _this2.setState({\n            tableData: result,\n            isLoaded: true\n          });\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    }\n  }, {\n    key: \"toggleAddForm\",\n    value: function toggleAddForm() {\n      this.setState({\n        addFormSelected: !this.state.addFormSelected\n      });\n    }\n  }, {\n    key: \"toggleUpdateForm\",\n    value: function toggleUpdateForm() {\n      this.setState({\n        updateFormSelected: !this.state.updateFormSelected\n      });\n    }\n  }, {\n    key: \"toggleDeleteForm\",\n    value: function toggleDeleteForm() {\n      this.setState({\n        deleteFormSelected: !this.state.deleteFormSelected\n      });\n    }\n  }, {\n    key: \"toggleMapUserForm\",\n    value: function toggleMapUserForm() {\n      this.setState({\n        mapUserFormSelected: !this.state.mapUserFormSelected\n      });\n    }\n  }, {\n    key: \"toggleUnmapUserForm\",\n    value: function toggleUnmapUserForm() {\n      this.setState({\n        unmapUserFormSelected: !this.state.unmapUserFormSelected\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this.setState({\n        isLoaded: false\n      });\n      this.toggleAddForm();\n      this.toggleUpdateForm();\n      this.toggleDeleteForm();\n      this.toggleMapUserForm();\n      this.toggleUnmapUserForm();\n      this.fetchEnergyMeters();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(EnergyMeterTable, {\n        tableData: this.state.tableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleAddForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Add Energy Meter \"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleUpdateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Edit Energy Meter \"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleDeleteForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Delete Energy Meter \"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleMapUserForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Map User To Energy Meter \"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.toggleUnmapUserForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Unmap User From Energy Meter\"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      })), React.createElement(Modal, {\n        isOpen: this.state.addFormSelected,\n        toggle: this.toggleAddForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleAddForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \" Add Energy Meter: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(AddEmForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.updateFormSelected,\n        toggle: this.toggleUpdateForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleUpdateForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \" Edit Energy Meter: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(UpdateEmForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.deleteFormSelected,\n        toggle: this.toggleDeleteForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleDeleteForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" Delete Energy Meter: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(DeleteEmForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.mapUserFormSelected,\n        toggle: this.toggleMapUserForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleMapUserForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \" Map Energy Meter To User: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(MapUserEmForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }))), React.createElement(Modal, {\n        isOpen: this.state.unmapUserFormSelected,\n        toggle: this.toggleUnmapUserForm,\n        className: this.props.className,\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleUnmapUserForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \" Unamp Energy Meter From User: \"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(UnmapUserEmForm, {\n        reloadHandler: this.reload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return EmManagementContainer;\n}(React.Component);\n\nexport default EmManagementContainer;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\person\\components\\em-management\\em-management-container.js"],"names":["React","APIResponseErrorMessage","Button","Card","Col","Modal","ModalBody","ModalHeader","Row","UpdateEmForm","API_EM","AddEmForm","DeleteEmForm","EnergyMeterTable","MapUserEmForm","UnmapUserEmForm","textStyle","color","textDecoration","EmManagementContainer","props","toggleAddForm","bind","toggleUpdateForm","toggleDeleteForm","toggleMapUserForm","toggleUnmapUserForm","reload","state","addFormSelected","updateFormSelected","deleteFormSelected","mapUserFormSelected","unmapUserFormSelected","collapseForm","tableData","isLoaded","errorStatus","error","fetchEnergyMeters","getEnergyMeters","result","status","err","console","log","setState","size","offset","className","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport APIResponseErrorMessage from '../../../commons/errorhandling/api-response-error-message';\r\nimport {\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\nimport UpdateEmForm from \"./update-em-form\";\r\nimport * as API_EM from '../../api/em-api'\r\nimport AddEmForm from './add-em-form';\r\nimport DeleteEmForm from './delete-em-form';\r\nimport EnergyMeterTable from './em-table';\r\nimport MapUserEmForm from './map-user-em-form';\r\nimport UnmapUserEmForm from './unmap-user-em-form';\r\n\r\nconst textStyle = {\r\n    color: 'black',\r\n    textDecoration: 'none'\r\n};\r\n\r\nclass EmManagementContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleAddForm = this.toggleAddForm.bind(this);\r\n        this.toggleUpdateForm = this.toggleUpdateForm.bind(this);\r\n        this.toggleDeleteForm = this.toggleDeleteForm.bind(this);\r\n        this.toggleMapUserForm = this.toggleMapUserForm.bind(this);\r\n        this.toggleUnmapUserForm = this.toggleUnmapUserForm.bind(this);\r\n        this.reload = this.reload.bind(this);\r\n        this.state = {\r\n            addFormSelected: false,\r\n            updateFormSelected: false,\r\n            deleteFormSelected: false,\r\n            mapUserFormSelected: false,\r\n            unmapUserFormSelected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchEnergyMeters();\r\n    }\r\n\r\n    fetchEnergyMeters() {\r\n        return API_EM.getEnergyMeters((result, status, err) => {\r\n\r\n            if (result !== null && status === 200) {\r\n                console.log(result)\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: err\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleAddForm() {\r\n        this.setState({addFormSelected: !this.state.addFormSelected});\r\n    }\r\n\r\n    toggleUpdateForm() {\r\n        this.setState({updateFormSelected: !this.state.updateFormSelected});\r\n    }\r\n\r\n    toggleDeleteForm() {\r\n        this.setState({deleteFormSelected: !this.state.deleteFormSelected});\r\n    }\r\n\r\n    toggleMapUserForm() {\r\n        this.setState({mapUserFormSelected: !this.state.mapUserFormSelected});\r\n    }\r\n\r\n    toggleUnmapUserForm() {\r\n        this.setState({unmapUserFormSelected: !this.state.unmapUserFormSelected});\r\n    }\r\n\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false\r\n        });\r\n        this.toggleAddForm();\r\n        this.toggleUpdateForm();\r\n        this.toggleDeleteForm();\r\n        this.toggleMapUserForm();\r\n        this.toggleUnmapUserForm();\r\n        this.fetchEnergyMeters();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <Row>\r\n                        <Col sm={{size: '8', offset: 1}}>\r\n                            {this.state.isLoaded && <EnergyMeterTable  tableData = {this.state.tableData}/>}\r\n                            {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                                            errorStatus={this.state.errorStatus}\r\n                                                            error={this.state.error}\r\n                                                        />   }\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row>\r\n                        <Col sm={{size: '8', offset: 1}}>\r\n                            <Button color=\"primary\" onClick={this.toggleAddForm}>Add Energy Meter </Button>\r\n                            <Button color=\"primary\" onClick={this.toggleUpdateForm}>Edit Energy Meter </Button>\r\n                            <Button color=\"primary\" onClick={this.toggleDeleteForm}>Delete Energy Meter </Button>\r\n                            <Button color=\"primary\" onClick={this.toggleMapUserForm}>Map User To Energy Meter </Button>\r\n                            <Button color=\"primary\" onClick={this.toggleUnmapUserForm}>Unmap User From Energy Meter</Button>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                </Card>\r\n                \r\n                <Modal isOpen={this.state.addFormSelected} toggle={this.toggleAddForm}\r\n                       className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleAddForm}> Add Energy Meter: </ModalHeader>\r\n                    <ModalBody>\r\n                        <AddEmForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.updateFormSelected} toggle={this.toggleUpdateForm}\r\n                       className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleUpdateForm}> Edit Energy Meter: </ModalHeader>\r\n                    <ModalBody>\r\n                        <UpdateEmForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.deleteFormSelected} toggle={this.toggleDeleteForm}\r\n                       className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleDeleteForm}> Delete Energy Meter: </ModalHeader>\r\n                    <ModalBody>\r\n                        <DeleteEmForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.mapUserFormSelected} toggle={this.toggleMapUserForm}\r\n                       className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleMapUserForm}> Map Energy Meter To User: </ModalHeader>\r\n                    <ModalBody>\r\n                        <MapUserEmForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal isOpen={this.state.unmapUserFormSelected} toggle={this.toggleUnmapUserForm}\r\n                       className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleUnmapUserForm}> Unamp Energy Meter From User: </ModalHeader>\r\n                    <ModalBody>\r\n                        <UnmapUserEmForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default EmManagementContainer;\r\n"]},"metadata":{},"sourceType":"module"}