{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\admin-chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport UserChatWindow from \"./user-chat-window\";\nimport UserList from \"./user-list\";\nimport * as API_USERS from \"../../person/api/admin-api\";\nimport { getChatHistory } from \"./chat-api\";\n\nvar AdminChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AdminChatWindow, _React$Component);\n\n  function AdminChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, AdminChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminChatWindow).call(this, props));\n\n    _this.onSelectUser = function (user) {\n      _this.setState({\n        selectedUser: user\n      }); // Assuming the admin's username is stored in state or props\n\n\n      var adminUsername = _this.state.sender; // or this.props.sender\n      // Fetch chat history\n\n      getChatHistory(adminUsername, user, function (response) {\n        // Check for successful response, then format and set messages\n        if (response.ok && response.json) {\n          response.json().then(function (messages) {\n            var formattedMessages = messages.map(function (message) {\n              return _objectSpread({}, message, {\n                isOwnMessage: message.sender === adminUsername\n              });\n            });\n\n            _this.setState({\n              messages: formattedMessages\n            });\n          });\n        } else {// Handle errors or no response\n        }\n      });\n    };\n\n    _this.handleIncomingMessage = function (newMessage) {\n      if (newMessage.type === \"TYPING\") {\n        // Handle typing notification\n        // For example, set a state to show the typing indicator in the UI\n        _this.setState({\n          otherUserIsTyping: true\n        }); // Optionally, use a timeout to hide the typing indicator after a short period\n\n\n        clearTimeout(_this.typingTimeout);\n        _this.typingTimeout = setTimeout(function () {\n          _this.setState({\n            otherUserIsTyping: false\n          });\n        }, 3000); // Hide typing indicator after 3 seconds of inactivity\n      } else {\n        // Handle regular chat messages\n        var isOwnMessage = newMessage.sender === _this.state.sender;\n\n        var formattedMessage = _objectSpread({}, newMessage, {\n          isOwnMessage: isOwnMessage\n        });\n\n        _this.setState(function (prevState) {\n          return {\n            messages: [].concat(_toConsumableArray(prevState.messages), [formattedMessage])\n          };\n        });\n      }\n\n      console.log(_this.state.messages);\n    };\n\n    _this.sendMessage = function (messageContent) {\n      var _this$state = _this.state,\n          stompClient = _this$state.stompClient,\n          selectedUser = _this$state.selectedUser;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          type: \"CHAT\",\n          content: messageContent,\n          sender: _this.state.sender,\n          receiver: selectedUser.username\n        };\n\n        _this.handleIncomingMessage(chatMessage);\n\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.sendTyping = function () {\n      var _this$state2 = _this.state,\n          stompClient = _this$state2.stompClient,\n          sender = _this$state2.sender;\n\n      if (stompClient && stompClient.connected) {\n        var typingMessage = {\n          type: \"TYPING\",\n          content: '',\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: [],\n      selectedUser: null,\n      users: null,\n      isLoaded: false,\n      sender: \"admin\",\n      otherUserIsTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(AdminChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.fetchPersons();\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        });\n\n        if (client) {\n          client.subscribe(\"/topic/admin\", function (message) {\n            console.log(message);\n            var newMessage = JSON.parse(message.body);\n\n            _this2.handleIncomingMessage(newMessage);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"fetchPersons\",\n    value: function fetchPersons() {\n      var _this3 = this;\n\n      return API_USERS.getUsers(function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n          var users = result.map(function (user) {\n            return {\n              id: user.id,\n              username: user.username\n            };\n          });\n\n          _this3.setState({\n            users: users,\n            isLoaded: true\n          });\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          selectedUser = _this$state3.selectedUser,\n          messages = _this$state3.messages;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(UserList, {\n        users: this.state.users,\n        onSelectUser: this.onSelectUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), selectedUser && React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: selectedUser.username,\n        isTyping: this.state.otherUserIsTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        onChange: this.sendTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AdminChatWindow;\n}(React.Component);\n\nexport default AdminChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\admin-chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","UserChatWindow","UserList","API_USERS","getChatHistory","AdminChatWindow","props","onSelectUser","user","setState","selectedUser","adminUsername","state","sender","response","ok","json","then","messages","formattedMessages","map","message","isOwnMessage","handleIncomingMessage","newMessage","type","otherUserIsTyping","clearTimeout","typingTimeout","setTimeout","formattedMessage","prevState","console","log","sendMessage","messageContent","stompClient","connected","chatMessage","content","receiver","username","send","JSON","stringify","sendTyping","typingMessage","users","isLoaded","fetchPersons","socket","client","over","connect","subscribe","parse","body","disconnect","getUsers","result","status","err","id","errorStatus","error","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport UserChatWindow from \"./user-chat-window\";\r\nimport UserList from \"./user-list\";\r\nimport * as API_USERS from \"../../person/api/admin-api\";\r\nimport {getChatHistory} from \"./chat-api\";\r\n\r\nclass AdminChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n            selectedUser: null,\r\n            users: null,\r\n            isLoaded: false,\r\n            sender: \"admin\",\r\n            otherUserIsTyping: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons()\r\n\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            if (client) {\r\n                client.subscribe(`/topic/admin`, (message) => {\r\n                    console.log(message)\r\n                    const newMessage = JSON.parse(message.body);\r\n                    this.handleIncomingMessage(newMessage);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    onSelectUser = (user) => {\r\n        this.setState({ selectedUser: user });\r\n\r\n        // Assuming the admin's username is stored in state or props\r\n        const adminUsername = this.state.sender; // or this.props.sender\r\n\r\n        // Fetch chat history\r\n        getChatHistory(adminUsername, user, (response) => {\r\n            // Check for successful response, then format and set messages\r\n            if (response.ok && response.json) {\r\n                response.json().then(messages => {\r\n                    const formattedMessages = messages.map(message => ({\r\n                        ...message,\r\n                        isOwnMessage: message.sender === adminUsername\r\n                    }));\r\n\r\n                    this.setState({ messages: formattedMessages });\r\n                });\r\n            } else {\r\n                // Handle errors or no response\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    handleIncomingMessage = (newMessage) => {\r\n        if (newMessage.type === \"TYPING\") {\r\n            // Handle typing notification\r\n            // For example, set a state to show the typing indicator in the UI\r\n            this.setState({ otherUserIsTyping: true });\r\n\r\n            // Optionally, use a timeout to hide the typing indicator after a short period\r\n            clearTimeout(this.typingTimeout);\r\n            this.typingTimeout = setTimeout(() => {\r\n                this.setState({ otherUserIsTyping: false });\r\n            }, 3000); // Hide typing indicator after 3 seconds of inactivity\r\n\r\n        } else {\r\n            // Handle regular chat messages\r\n            const isOwnMessage = newMessage.sender === this.state.sender;\r\n\r\n            const formattedMessage = {\r\n                ...newMessage,\r\n                isOwnMessage: isOwnMessage\r\n            };\r\n\r\n            this.setState(prevState => ({\r\n                messages: [...prevState.messages, formattedMessage]\r\n            }));\r\n        }\r\n        console.log(this.state.messages);\r\n    };\r\n\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient, selectedUser } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = {\r\n                type: \"CHAT\",\r\n                content: messageContent,\r\n                sender: this.state.sender,\r\n                receiver: selectedUser.username,\r\n            };\r\n            this.handleIncomingMessage(chatMessage)\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    sendTyping = () => {\r\n        const { stompClient, sender } = this.state;\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            const typingMessage = {\r\n                type: \"TYPING\",\r\n                content: '',\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\r\n        }\r\n    };\r\n\r\n    fetchPersons() {\r\n        return API_USERS.getUsers((result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                console.log(result);\r\n\r\n                const users = result.map(user => ({\r\n                    id: user.id,\r\n                    username: user.username\r\n                }));\r\n\r\n                this.setState({\r\n                    users: users,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selectedUser, messages } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.isLoaded && <UserList users={this.state.users} onSelectUser={this.onSelectUser}/>}\r\n                {selectedUser && (\r\n                    <div className=\"chat-window\">\r\n                        <ChatHeader chatWith={selectedUser.username} isTyping={this.state.otherUserIsTyping}/>\r\n                        <MessageList messages={messages} />\r\n                        <ChatInput onSendMessage={this.sendMessage} onChange={this.sendTyping}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminChatWindow;\r\n"]},"metadata":{},"sourceType":"module"}