{"ast":null,"code":"import _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\user\\\\user-page.js\";\nimport React from 'react';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport * as API_EM from \"./api/em-api\";\nimport * as API_DATA from \"./api/consumption-api\";\nimport EnergyMeterTable from './components/em-table';\nimport { Redirect } from 'react-router-dom';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport DatePicker from \"react-datepicker\";\nvar localStorage = window.localStorage;\n\nvar UserPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserPage, _React$Component);\n\n  function UserPage(props) {\n    var _this;\n\n    _classCallCheck(this, UserPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserPage).call(this, props));\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        selectedDate: date\n      }, function () {\n        _this.fetchEnergyData();\n      });\n    };\n\n    _this.fetchEnergyData = function () {\n      var selectedDate = _this.state.selectedDate;\n      var userId = localStorage.getItem('id');\n      var formattedDate = selectedDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\n\n      API_DATA.getEnergyDataByUserIdAndDate(userId, formattedDate, function (result, status, err) {\n        // Assume the API returns an array of objects with 'hour' and 'value' keys\n        if (result !== null && status === 200) {\n          _this.setState({\n            energyData: result\n          });\n        } else {// Handle errors\n        }\n      });\n    };\n\n    _this.toggleModal = function () {\n      _this.setState({\n        showModal: !_this.state.showModal\n      });\n    };\n\n    _this.reload = _this.reload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      addFormSelected: false,\n      updateFormSelected: false,\n      deleteFormSelected: false,\n      collapseForm: false,\n      tableData: [],\n      isLoaded: false,\n      errorStatus: 0,\n      error: null,\n      notification: '',\n      showModal: false,\n      selectedDate: new Date(),\n      energyData: []\n    };\n    _this.stompClient = null;\n    return _this;\n  }\n\n  _createClass(UserPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPersons();\n      this.connectWebSocket();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.stompClient) {\n        this.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"connectWebSocket\",\n    value: function connectWebSocket() {\n      var _this2 = this;\n\n      var socket = new SockJS('http://localhost:8082/ws');\n      this.stompClient = Stomp.over(socket);\n      var currentUserId = localStorage.getItem('id');\n      this.stompClient.connect({}, function (frame) {\n        _this2.stompClient.subscribe('/topic/user.' + currentUserId, function (notification) {\n          _this2.setState({\n            notification: notification.body,\n            showModal: true\n          });\n        });\n      });\n    }\n  }, {\n    key: \"fetchPersons\",\n    value: function fetchPersons() {\n      var _this3 = this;\n\n      var userId = localStorage.id;\n      return API_EM.getEnergyMetersByUserId(userId, function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n\n          _this3.setState({\n            tableData: result,\n            isLoaded: true\n          });\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this.setState({\n        isLoaded: false\n      });\n      this.fetchPersons();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, localStorage.role !== \"ROLE_CLIENT\" && React.createElement(Redirect, {\n        to: \"/login\",\n        push: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Notification\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.notification)), React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \" Energy Meters \")), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(EnergyMeterTable, {\n        tableData: this.state.tableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(DatePicker, {\n        selected: this.state.selectedDate,\n        onChange: this.handleDateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        width: 500,\n        height: 300,\n        data: this.state.energyData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        dataKey: \"hour\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }), React.createElement(Legend, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"monotone\",\n        dataKey: \"value\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return UserPage;\n}(React.Component);\n\nexport default UserPage;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\user\\user-page.js"],"names":["React","APIResponseErrorMessage","Button","Card","CardHeader","Col","Modal","ModalBody","ModalHeader","Row","API_EM","API_DATA","EnergyMeterTable","Redirect","SockJS","Stomp","CartesianGrid","Legend","Line","LineChart","Tooltip","XAxis","YAxis","DatePicker","localStorage","window","UserPage","props","handleDateChange","date","setState","selectedDate","fetchEnergyData","state","userId","getItem","formattedDate","toISOString","split","getEnergyDataByUserIdAndDate","result","status","err","energyData","toggleModal","showModal","reload","bind","addFormSelected","updateFormSelected","deleteFormSelected","collapseForm","tableData","isLoaded","errorStatus","error","notification","Date","stompClient","fetchPersons","connectWebSocket","disconnect","socket","over","currentUserId","connect","frame","subscribe","body","id","getEnergyMetersByUserId","console","log","role","size","offset","top","right","left","bottom","r","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nimport * as API_EM from \"./api/em-api\"\r\nimport * as API_DATA from \"./api/consumption-api\"\r\nimport EnergyMeterTable from './components/em-table';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nconst localStorage = window.localStorage;\r\n\r\nclass UserPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.reload = this.reload.bind(this);\r\n        this.state = {\r\n            addFormSelected: false,\r\n            updateFormSelected: false,\r\n            deleteFormSelected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n            notification: '',\r\n            showModal: false,\r\n            selectedDate: new Date(),\r\n            energyData: [],\r\n        };\r\n        this.stompClient = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons();\r\n        this.connectWebSocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.stompClient) {\r\n            this.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    handleDateChange = (date) => {\r\n        this.setState({\r\n            selectedDate: date\r\n        }, () => {\r\n            this.fetchEnergyData();\r\n        });\r\n    };\r\n\r\n    connectWebSocket() {\r\n        const socket = new SockJS('http://localhost:8082/ws');\r\n        this.stompClient = Stomp.over(socket);\r\n        const currentUserId = localStorage.getItem('id');\r\n\r\n        this.stompClient.connect({}, frame => {\r\n            this.stompClient.subscribe('/topic/user.' + currentUserId, notification => {\r\n                this.setState({\r\n                    notification: notification.body,\r\n                    showModal: true\r\n                });\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    fetchPersons() {\r\n        const userId = localStorage.id;\r\n\r\n        return API_EM.getEnergyMetersByUserId(userId, (result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                console.log(result)\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: err\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchEnergyData = () => {\r\n        const { selectedDate } = this.state;\r\n        const userId = localStorage.getItem('id');\r\n        const formattedDate = selectedDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\r\n\r\n        API_DATA.getEnergyDataByUserIdAndDate(userId, formattedDate, (result, status, err) => {\r\n            // Assume the API returns an array of objects with 'hour' and 'value' keys\r\n            if (result !== null && status === 200) {\r\n                this.setState({\r\n                    energyData: result\r\n                });\r\n            } else {\r\n                // Handle errors\r\n            }\r\n        });\r\n    };\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false\r\n        });\r\n        this.fetchPersons();\r\n    }\r\n\r\n    toggleModal = () => {\r\n        this.setState({ showModal: !this.state.showModal });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {localStorage.role !== \"ROLE_CLIENT\" && <Redirect to=\"/login\" push/>}\r\n\r\n                    <Modal isOpen={this.state.showModal} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}>Notification</ModalHeader>\r\n                        <ModalBody>\r\n                            {this.state.notification}\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                    <CardHeader>\r\n                        <strong> Energy Meters </strong>\r\n                    </CardHeader>\r\n                    <Card>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                {this.state.isLoaded && <EnergyMeterTable  tableData = {this.state.tableData}/>}\r\n                                {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                                                errorStatus={this.state.errorStatus}\r\n                                                                error={this.state.error}\r\n                                                            />   }\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n                <div>\r\n                    <DatePicker\r\n                        selected={this.state.selectedDate}\r\n                        onChange={this.handleDateChange}\r\n                    />\r\n\r\n                    <LineChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={this.state.energyData}\r\n                        margin={{\r\n                            top: 5, right: 30, left: 20, bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"hour\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                    </LineChart>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default UserPage;\r\n"]},"metadata":{},"sourceType":"module"}