{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nvar ChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChatWindow, _React$Component);\n\n  function ChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, ChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChatWindow).call(this, props));\n\n    _this.sendMessage = function (messageContent) {\n      var stompClient = _this.state.stompClient;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          /* ... construct your message object ... */\n        };\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: []\n    };\n    return _this;\n  }\n\n  _createClass(ChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Initialize WebSocket connection\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        }); // Subscribe to receive messages\n\n\n        client.subscribe('/topic/messages', function (message) {\n          var newMessage = JSON.parse(message.body);\n\n          _this2.setState(function (prevState) {\n            return {\n              messages: [].concat(_toConsumableArray(prevState.messages), [newMessage])\n            };\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var messages = this.state.messages;\n      var chatWith = this.props.chatWith;\n      return React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: chatWith,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ChatWindow;\n}(React.Component);\n\nexport default ChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","ChatWindow","props","sendMessage","messageContent","stompClient","state","connected","chatMessage","send","JSON","stringify","messages","socket","client","over","connect","setState","subscribe","message","newMessage","parse","body","prevState","disconnect","chatWith","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAGMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;;AADe,UAiCnBC,WAjCmB,GAiCL,UAACC,cAAD,EAAoB;AAAA,UACtBC,WADsB,GACN,MAAKC,KADC,CACtBD,WADsB;;AAE9B,UAAIA,WAAW,IAAIA,WAAW,CAACE,SAA/B,EAA0C;AACtC,YAAMC,WAAW,GAAG;AAAE;AAAF,SAApB;AACAH,QAAAA,WAAW,CAACI,IAAZ,CAAiB,mBAAjB,EAAsC,EAAtC,EAA0CC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAA1C;AACH;AACJ,KAvCkB;;AAEf,UAAKF,KAAL,GAAa;AACTD,MAAAA,WAAW,EAAE,IADJ;AAETO,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAFe;AAMlB;;;;wCAEmB;AAAA;;AAChB;AACA,UAAMC,MAAM,GAAG,IAAId,MAAJ,CAAW,mCAAX,CAAf;AACA,UAAMe,MAAM,GAAGd,KAAK,CAACe,IAAN,CAAWF,MAAX,CAAf;AAEAC,MAAAA,MAAM,CAACE,OAAP,CAAe,EAAf,EAAmB,YAAM;AACrB,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEZ,UAAAA,WAAW,EAAES;AAAf,SAAd,EADqB,CAGrB;;;AACAA,QAAAA,MAAM,CAACI,SAAP,CAAiB,iBAAjB,EAAoC,UAACC,OAAD,EAAa;AAC7C,cAAMC,UAAU,GAAGV,IAAI,CAACW,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAnB;;AACA,UAAA,MAAI,CAACL,QAAL,CAAc,UAAAM,SAAS;AAAA,mBAAK;AACxBX,cAAAA,QAAQ,+BAAMW,SAAS,CAACX,QAAhB,IAA0BQ,UAA1B;AADgB,aAAL;AAAA,WAAvB;AAGH,SALD;AAMH,OAVD;AAWH;;;2CAEsB;AACnB;AACA,UAAI,KAAKd,KAAL,CAAWD,WAAf,EAA4B;AACxB,aAAKC,KAAL,CAAWD,WAAX,CAAuBmB,UAAvB;AACH;AACJ;;;6BAUQ;AAAA,UACGZ,QADH,GACgB,KAAKN,KADrB,CACGM,QADH;AAAA,UAEGa,QAFH,GAEgB,KAAKvB,KAFrB,CAEGuB,QAFH;AAIL,aACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,QAAQ,EAAEA,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,WAAD;AAAa,QAAA,QAAQ,EAAEb,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,SAAD;AAAW,QAAA,aAAa,EAAE,KAAKT,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAOH;;;;EArDoBR,KAAK,CAAC+B,S;;AAwD/B,eAAezB,UAAf","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\n\r\nclass ChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Initialize WebSocket connection\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            // Subscribe to receive messages\r\n            client.subscribe('/topic/messages', (message) => {\r\n                const newMessage = JSON.parse(message.body);\r\n                this.setState(prevState => ({\r\n                    messages: [...prevState.messages, newMessage]\r\n                }));\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = { /* ... construct your message object ... */ };\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { messages } = this.state;\r\n        const { chatWith } = this.props;\r\n\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatHeader chatWith={chatWith} />\r\n                <MessageList messages={messages} />\r\n                <ChatInput onSendMessage={this.sendMessage} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatWindow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}