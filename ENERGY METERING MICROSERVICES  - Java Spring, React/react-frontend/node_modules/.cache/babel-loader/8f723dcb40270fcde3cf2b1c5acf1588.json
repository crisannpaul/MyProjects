{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\user-chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nvar UserChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserChatWindow, _React$Component);\n\n  function UserChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, UserChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserChatWindow).call(this, props));\n\n    _this.handleIncomingMessage = function (newMessage) {\n      if (newMessage.type === \"TYPING\") {\n        // Handle typing notification\n        // For example, set a state to show the typing indicator in the UI\n        _this.setState({\n          otherUserIsTyping: true\n        }); // Optionally, use a timeout to hide the typing indicator after a short period\n\n\n        clearTimeout(_this.typingTimeout);\n        _this.typingTimeout = setTimeout(function () {\n          _this.setState({\n            otherUserIsTyping: false\n          });\n        }, 3000); // Hide typing indicator after 3 seconds of inactivity\n      } else {\n        // Handle regular chat messages\n        var isOwnMessage = newMessage.sender === _this.state.sender;\n\n        var formattedMessage = _objectSpread({}, newMessage, {\n          isOwnMessage: isOwnMessage\n        });\n\n        _this.setState(function (prevState) {\n          return {\n            messages: [].concat(_toConsumableArray(prevState.messages), [formattedMessage])\n          };\n        });\n      }\n\n      console.log(_this.state.messages);\n    };\n\n    _this.sendMessage = function (messageContent) {\n      var _this$state = _this.state,\n          stompClient = _this$state.stompClient,\n          sender = _this$state.sender;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          type: \"CHAT\",\n          content: messageContent,\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n\n        _this.handleIncomingMessage(chatMessage);\n\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.sendTyping = function () {\n      var _this$state2 = _this.state,\n          stompClient = _this$state2.stompClient,\n          sender = _this$state2.sender;\n\n      if (stompClient && stompClient.connected) {\n        var typingMessage = {\n          type: \"TYPING\",\n          content: '',\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: [],\n      sender: props.sender,\n      receiver: 'admin',\n      otherUserIsTyping: false\n    };\n    return _this;\n  }\n\n  _createClass(UserChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        }); // Subscribe to receive messages\n\n\n        client.subscribe(\"/topic/users/\".concat(_this2.state.sender), function (message) {\n          console.log(message);\n          var newMessage = JSON.parse(message.body);\n\n          _this2.handleIncomingMessage(newMessage);\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var messages = this.state.messages;\n      return React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: this.state.receiver,\n        isTyping: this.state.otherUserIsTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), \"/>\", React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        onChange: this.sendTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserChatWindow;\n}(React.Component);\n\nexport default UserChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\user-chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","UserChatWindow","props","handleIncomingMessage","newMessage","type","setState","otherUserIsTyping","clearTimeout","typingTimeout","setTimeout","isOwnMessage","sender","state","formattedMessage","prevState","messages","console","log","sendMessage","messageContent","stompClient","connected","chatMessage","content","receiver","send","JSON","stringify","sendTyping","typingMessage","socket","client","over","connect","subscribe","message","parse","body","disconnect","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\n\r\nclass UserChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n            sender: props.sender,\r\n            receiver: 'admin',\r\n            otherUserIsTyping: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            // Subscribe to receive messages\r\n            client.subscribe(`/topic/users/${this.state.sender}`, (message) => {\r\n                console.log(message)\r\n                const newMessage = JSON.parse(message.body);\r\n                this.handleIncomingMessage(newMessage)\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    handleIncomingMessage = (newMessage) => {\r\n        if (newMessage.type === \"TYPING\") {\r\n            // Handle typing notification\r\n            // For example, set a state to show the typing indicator in the UI\r\n            this.setState({ otherUserIsTyping: true });\r\n\r\n            // Optionally, use a timeout to hide the typing indicator after a short period\r\n            clearTimeout(this.typingTimeout);\r\n            this.typingTimeout = setTimeout(() => {\r\n                this.setState({ otherUserIsTyping: false });\r\n            }, 3000); // Hide typing indicator after 3 seconds of inactivity\r\n\r\n        } else {\r\n            // Handle regular chat messages\r\n            const isOwnMessage = newMessage.sender === this.state.sender;\r\n\r\n            const formattedMessage = {\r\n                ...newMessage,\r\n                isOwnMessage: isOwnMessage\r\n            };\r\n\r\n            this.setState(prevState => ({\r\n                messages: [...prevState.messages, formattedMessage]\r\n            }));\r\n        }\r\n        console.log(this.state.messages);\r\n    };\r\n\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient, sender } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = {\r\n                type: \"CHAT\",\r\n                content: messageContent,\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            this.handleIncomingMessage(chatMessage)\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    sendTyping = () => {\r\n        const { stompClient, sender } = this.state;\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            const typingMessage = {\r\n                type: \"TYPING\",\r\n                content: '',\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(typingMessage));\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { messages } = this.state;\r\n\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatHeader chatWith={this.state.receiver} isTyping={this.state.otherUserIsTyping}/>/>\r\n                <MessageList messages={messages} />\r\n                <ChatInput onSendMessage={this.sendMessage} onChange={this.sendTyping}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserChatWindow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}