{"ast":null,"code":"import _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\login\\\\components\\\\login-form.js\";\nimport React from 'react';\nimport validate from \"./validators/login-validator\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_LOGIN from \"../api/login-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Redirect } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nvar localStorage = window.localStorage;\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm(props) {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      isUserLoaded: false,\n      formIsValid: false,\n      formControls: {\n        userName: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        password: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 4,\n            isRequired: true\n          }\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"authenticateUser\",\n    value: function authenticateUser(user) {\n      var _this2 = this;\n\n      return API_LOGIN.postLogin(user, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully authenticated user with id: \" + result);\n          localStorage.setItem(\"id\", result.id);\n          localStorage.setItem(\"username\", result.username);\n          localStorage.setItem(\"role\", result.role);\n\n          _this2.setState({\n            isUserLoaded: true\n          });\n\n          console.log(localStorage);\n        } else {\n          console.log(error);\n\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var user = {\n        username: this.state.formControls.userName.value,\n        password: this.state.formControls.password.value\n      };\n      console.log(user);\n      this.authenticateUser(user);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.isUserLoaded && localStorage.role === \"ROLE_ADMIN\" && React.createElement(Redirect, {\n        to: \"/admin\",\n        push: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), this.state.isUserLoaded && localStorage.role === \"ROLE_CLIENT\" && React.createElement(Redirect, {\n        to: \"/user\",\n        push: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(FormGroup, {\n        id: \"userName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"userNameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        name: \"userName\",\n        id: \"userNameField\",\n        placeholder: this.state.formControls.userName.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.userName.value,\n        touched: this.state.formControls.userName.touched ? 1 : 0,\n        valid: this.state.formControls.userName.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), this.state.formControls.userName.touched && !this.state.formControls.userName.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \" * Username must have at least 3 characters \")), React.createElement(FormGroup, {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"passwordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"passwordField\",\n        placeholder: this.state.formControls.password.placeholder,\n        type: \"password\",\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.password.value,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        valid: this.state.formControls.password.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), this.state.formControls.password.touched && !this.state.formControls.password.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" * Passowrd must be at least 4 characters long\")), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"  Login \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nexport default LoginForm;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\login\\components\\login-form.js"],"names":["React","validate","Button","API_LOGIN","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","Redirect","useHistory","localStorage","window","LoginForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","errorStatus","error","isUserLoaded","userName","placeholder","minLength","isRequired","password","handleSubmit","collapseForm","user","postLogin","result","status","console","log","setItem","id","username","role","authenticateUser","size","offset","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AACA,OAAOC,uBAAP,MAAoC,wDAApC;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,YAAvB;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,QAAuC,YAAvC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,IAAMC,YAAY,GAAGC,MAAM,CAACD,YAA5B;;IAEME,S;;;;;AAEF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;;AADe,UA4CnBC,YA5CmB,GA4CJ,UAAAC,KAAK,EAAI;AAEpB,UAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,UAAME,KAAK,GAAGH,KAAK,CAACE,MAAN,CAAaC,KAA3B;AAEA,UAAMC,eAAe,GAAG,MAAKC,KAAL,CAAWC,YAAnC;AAEA,UAAMC,kBAAkB,GAAGH,eAAe,CAACH,IAAD,CAA1C;AAEAM,MAAAA,kBAAkB,CAACJ,KAAnB,GAA2BA,KAA3B;AACAI,MAAAA,kBAAkB,CAACC,OAAnB,GAA6B,IAA7B;AACAD,MAAAA,kBAAkB,CAACE,KAAnB,GAA2BzB,QAAQ,CAACmB,KAAD,EAAQI,kBAAkB,CAACG,eAA3B,CAAnC;AACAN,MAAAA,eAAe,CAACH,IAAD,CAAf,GAAwBM,kBAAxB;AAEA,UAAII,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIC,sBAAT,IAAmCR,eAAnC,EAAoD;AAChDO,QAAAA,WAAW,GAAGP,eAAe,CAACQ,sBAAD,CAAf,CAAwCH,KAAxC,IAAiDE,WAA/D;AACH;;AAED,YAAKE,QAAL,CAAc;AACVP,QAAAA,YAAY,EAAEF,eADJ;AAEVO,QAAAA,WAAW,EAAEA;AAFH,OAAd;AAKH,KApEkB;;AAEf,UAAKG,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AAEA,UAAKV,KAAL,GAAa;AAETW,MAAAA,WAAW,EAAE,CAFJ;AAGTC,MAAAA,KAAK,EAAE,IAHE;AAITC,MAAAA,YAAY,EAAE,KAJL;AAKTP,MAAAA,WAAW,EAAE,KALJ;AAOTL,MAAAA,YAAY,EAAE;AACVa,QAAAA,QAAQ,EAAE;AACNhB,UAAAA,KAAK,EAAE,EADD;AAENiB,UAAAA,WAAW,EAAE,KAFP;AAGNX,UAAAA,KAAK,EAAE,KAHD;AAIND,UAAAA,OAAO,EAAE,KAJH;AAKNE,UAAAA,eAAe,EAAE;AACbW,YAAAA,SAAS,EAAE,CADE;AAEbC,YAAAA,UAAU,EAAE;AAFC;AALX,SADA;AAWVC,QAAAA,QAAQ,EAAE;AACNpB,UAAAA,KAAK,EAAE,EADD;AAENiB,UAAAA,WAAW,EAAE,KAFP;AAGNX,UAAAA,KAAK,EAAE,KAHD;AAIND,UAAAA,OAAO,EAAE,KAJH;AAKNE,UAAAA,eAAe,EAAE;AACbW,YAAAA,SAAS,EAAE,CADE;AAEbC,YAAAA,UAAU,EAAE;AAFC;AALX;AAXA;AAPL,KAAb;AA+BA,UAAKvB,YAAL,GAAoB,MAAKA,YAAL,CAAkBgB,IAAlB,uDAApB;AACA,UAAKS,YAAL,GAAoB,MAAKA,YAAL,CAAkBT,IAAlB,uDAApB;AApCe;AAqClB;;;;iCAEY;AACT,WAAKF,QAAL,CAAc;AAACY,QAAAA,YAAY,EAAE,CAAC,KAAKpB,KAAL,CAAWoB;AAA3B,OAAd;AACH;;;qCA6BgBC,I,EAAM;AAAA;;AACnB,aAAOxC,SAAS,CAACyC,SAAV,CAAoBD,IAApB,EAA0B,UAACE,MAAD,EAASC,MAAT,EAAiBZ,KAAjB,EAA2B;AACxD,YAAIW,MAAM,KAAK,IAAX,KAAoBC,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjD,CAAJ,EAA2D;AACvDC,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CH,MAA1D;AAEAjC,UAAAA,YAAY,CAACqC,OAAb,CAAqB,IAArB,EAA2BJ,MAAM,CAACK,EAAlC;AACAtC,UAAAA,YAAY,CAACqC,OAAb,CAAqB,UAArB,EAAiCJ,MAAM,CAACM,QAAxC;AACAvC,UAAAA,YAAY,CAACqC,OAAb,CAAqB,MAArB,EAA6BJ,MAAM,CAACO,IAApC;;AACA,UAAA,MAAI,CAACtB,QAAL,CAAe;AACXK,YAAAA,YAAY,EAAE;AADH,WAAf;;AAGAY,UAAAA,OAAO,CAACC,GAAR,CAAYpC,YAAZ;AAEH,SAXD,MAWO;AACHmC,UAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;;AACA,UAAA,MAAI,CAACJ,QAAL,CAAe;AACXG,YAAAA,WAAW,EAAEa,MADF;AAEXZ,YAAAA,KAAK,EAAEA;AAFI,WAAf;AAIH;AACJ,OAnBM,CAAP;AAoBH;;;mCAEc;AACX,UAAIS,IAAI,GAAG;AACPQ,QAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiChB,KADpC;AAEPoB,QAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCpB;AAFpC,OAAX;AAKA2B,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,WAAKU,gBAAL,CAAsBV,IAAtB;AACH;;;6BAEQ;AACL,aAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKrB,KAAL,CAAWa,YAAX,IAA2BvB,YAAY,CAACwC,IAAb,KAAsB,YAAjD,IAAiE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAsB,QAAA,IAAI,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADtE,EAEK,KAAK9B,KAAL,CAAWa,YAAX,IAA2BvB,YAAY,CAACwC,IAAb,KAAsB,aAAjD,IAAkE,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,OAAb;AAAqB,QAAA,IAAI,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFvE,EAII,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,eAA1B;AAA0C,QAAA,WAAW,EAAE,KAAK9B,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiCC,WAAxF;AACO,QAAA,QAAQ,EAAE,KAAKrB,YADtB;AAEO,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiChB,KAFtD;AAGO,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiCX,OAAjC,GAA0C,CAA1C,GAA8C,CAH9D;AAIO,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiCV,KAJ/C;AAKO,QAAA,QAAQ,MALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EASK,KAAKJ,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiCX,OAAjC,IAA4C,CAAC,KAAKH,KAAL,CAAWC,YAAX,CAAwBa,QAAxB,CAAiCV,KAA9E,IACD;AAAK,QAAA,SAAS,EAAE,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAVJ,CAJJ,EAiBI,oBAAC,SAAD;AAAW,QAAA,EAAE,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,eAA1B;AAA0C,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCH,WAAxF;AACO,QAAA,IAAI,EAAC,UADZ;AAEO,QAAA,QAAQ,EAAE,KAAKrB,YAFtB;AAGO,QAAA,YAAY,EAAE,KAAKM,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCpB,KAHtD;AAIO,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCf,OAAjC,GAA0C,CAA1C,GAA8C,CAJ9D;AAKO,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCd,KAL/C;AAMO,QAAA,QAAQ,MANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAUK,KAAKJ,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCf,OAAjC,IAA4C,CAAC,KAAKH,KAAL,CAAWC,YAAX,CAAwBiB,QAAxB,CAAiCd,KAA9E,IACD;AAAK,QAAA,SAAS,EAAE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAXJ,CAjBJ,EA+BQ,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE;AAAC4B,UAAAA,IAAI,EAAE,GAAP;AAAYC,UAAAA,MAAM,EAAE;AAApB,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,QAAd;AAAwB,QAAA,QAAQ,EAAE,CAAC,KAAKjC,KAAL,CAAWM,WAA9C;AAA2D,QAAA,OAAO,EAAE,KAAKa,YAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,CA/BR,EAsCQ,KAAKnB,KAAL,CAAWW,WAAX,GAAyB,CAAzB,IACA,oBAAC,uBAAD;AAAyB,QAAA,WAAW,EAAE,KAAKX,KAAL,CAAWW,WAAjD;AAA8D,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWY,KAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvCR,CAFJ;AA6CH;;;;EAvJmBlC,KAAK,CAACwD,S;;AA0J9B,eAAe1C,SAAf","sourcesContent":["import React from 'react';\r\nimport validate from \"./validators/login-validator\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_LOGIN from \"../api/login-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst localStorage = window.localStorage;\r\n\r\nclass LoginForm extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n            isUserLoaded: false,\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                userName: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 4,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    authenticateUser(user) {\r\n        return API_LOGIN.postLogin(user, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully authenticated user with id: \" + result);\r\n\r\n                localStorage.setItem(\"id\", result.id);\r\n                localStorage.setItem(\"username\", result.username);\r\n                localStorage.setItem(\"role\", result.role);\r\n                this.setState(({\r\n                    isUserLoaded: true\r\n                }));\r\n                console.log(localStorage);\r\n\r\n            } else {\r\n                console.log(error)\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let user = {\r\n            username: this.state.formControls.userName.value,\r\n            password: this.state.formControls.password.value,\r\n        };\r\n\r\n        console.log(user);\r\n        this.authenticateUser(user);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div>\r\n                {this.state.isUserLoaded && localStorage.role === \"ROLE_ADMIN\" && <Redirect to=\"/admin\" push/>}\r\n                {this.state.isUserLoaded && localStorage.role === \"ROLE_CLIENT\" && <Redirect to=\"/user\" push/>}\r\n\r\n                <FormGroup id='userName'>\r\n                    <Label for='userNameField'> Username: </Label>\r\n                    <Input name='userName' id='userNameField' placeholder={this.state.formControls.userName.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.userName.value}\r\n                           touched={this.state.formControls.userName.touched? 1 : 0}\r\n                           valid={this.state.formControls.userName.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.userName.touched && !this.state.formControls.userName.valid &&\r\n                    <div className={\"error-message row\"}> * Username must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='password'>\r\n                    <Label for='passwordField'> Password: </Label>\r\n                    <Input name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}\r\n                           type='password'\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.password.value}\r\n                           touched={this.state.formControls.password.touched? 1 : 0}\r\n                           valid={this.state.formControls.password.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.password.touched && !this.state.formControls.password.valid &&\r\n                    <div className={\"error-message\"}> * Passowrd must be at least 4 characters long</div>}\r\n                </FormGroup>\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 2}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Login </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}