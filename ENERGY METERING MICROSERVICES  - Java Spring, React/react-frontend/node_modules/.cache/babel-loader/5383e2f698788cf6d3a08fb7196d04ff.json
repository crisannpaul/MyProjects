{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\user\\\\user-page.js\";\nimport React, { useState } from 'react';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport * as API_EM from \"./api/em-api\";\nimport * as API_DATA from \"./api/consumption-api\";\nimport EnergyMeterTable from './components/em-table';\nimport { Redirect } from 'react-router-dom';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport { CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport DatePicker from \"react-datepicker\";\nimport ChatWindow from \"../commons/chat/chat-window\";\nvar localStorage = window.localStorage;\n\nvar _useState = useState([{\n  text: 'Hey',\n  isOwnMessage: false\n}, {\n  text: 'Hello',\n  isOwnMessage: true\n}]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n\nvar UserPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserPage, _React$Component);\n\n  function UserPage(props) {\n    var _this;\n\n    _classCallCheck(this, UserPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserPage).call(this, props));\n\n    _this.handleSendMessage = function (newMessageText) {\n      var newMessage = {\n        text: newMessageText,\n        isOwnMessage: true\n      };\n\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [newMessage])\n        };\n      }); // TODO: Send the message to the server or through WebSocket\n\n    };\n\n    _this.toggleModal = function () {\n      _this.setState({\n        showModal: !_this.state.showModal\n      });\n    };\n\n    _this.reload = _this.reload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      addFormSelected: false,\n      updateFormSelected: false,\n      deleteFormSelected: false,\n      collapseForm: false,\n      tableData: [],\n      isLoaded: false,\n      errorStatus: 0,\n      error: null,\n      notification: '',\n      showModal: false,\n      selectedDate: new Date(),\n      energyData: [],\n      messages: [{\n        text: 'Hey',\n        isOwnMessage: false\n      }, {\n        text: 'Hello',\n        isOwnMessage: true\n      }]\n    };\n    _this.stompClient = null;\n    return _this;\n  }\n\n  _createClass(UserPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchPersons();\n      this.connectWebSocket();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.stompClient) {\n        this.stompClient.disconnect();\n      }\n    } // handleDateChange = (date) => {\n    //     this.setState({\n    //         selectedDate: date\n    //     }, () => {\n    //         this.fetchEnergyData();\n    //     });\n    // };\n\n  }, {\n    key: \"connectWebSocket\",\n    value: function connectWebSocket() {\n      var _this2 = this;\n\n      var socket = new SockJS('http://localhost:8082/ws');\n      this.stompClient = Stomp.over(socket);\n      var currentUserId = localStorage.getItem('id');\n      this.stompClient.connect({}, function (frame) {\n        _this2.stompClient.subscribe('/topic/user.' + currentUserId, function (notification) {\n          _this2.setState({\n            notification: notification.body,\n            showModal: true\n          });\n        });\n      });\n    }\n  }, {\n    key: \"fetchPersons\",\n    value: function fetchPersons() {\n      var _this3 = this;\n\n      var userId = localStorage.id;\n      return API_EM.getEnergyMetersByUserId(userId, function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n\n          _this3.setState({\n            tableData: result,\n            isLoaded: true\n          });\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    } // fetchEnergyData = () => {\n    //     const { selectedDate } = this.state;\n    //     const userId = localStorage.getItem('id');\n    //     const formattedDate = selectedDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\n    //\n    //     API_DATA.getEnergyDataByUserIdAndDate(userId, formattedDate, (result, status, err) => {\n    //         // Assume the API returns an array of objects with 'hour' and 'value' keys\n    //         if (result !== null && status === 200) {\n    //             const dataForChart = Object.entries(result).map(([hour, value]) => {\n    //                 return { hour, value };\n    //             });\n    //             console.log(dataForChart)\n    //             this.setState({\n    //                 energyData: dataForChart\n    //             });\n    //         } else {\n    //             // Handle errors\n    //         }\n    //     });\n    // };\n\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this.setState({\n        isLoaded: false\n      });\n      this.fetchPersons();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, localStorage.role !== \"ROLE_CLIENT\" && React.createElement(Redirect, {\n        to: \"/login\",\n        push: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        isOpen: this.state.showModal,\n        toggle: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Notification\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.state.notification)), React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \" Energy Meters \")), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '8',\n          offset: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(EnergyMeterTable, {\n        tableData: this.state.tableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }))))), React.createElement(ChatWindow, {\n        chatWith: 'admin',\n        messages: messages,\n        onSendMessage: this.handleSendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserPage;\n}(React.Component);\n\nexport default UserPage;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\user\\user-page.js"],"names":["React","useState","APIResponseErrorMessage","Button","Card","CardHeader","Col","Modal","ModalBody","ModalHeader","Row","API_EM","API_DATA","EnergyMeterTable","Redirect","SockJS","Stomp","CartesianGrid","Legend","Line","LineChart","Tooltip","XAxis","YAxis","DatePicker","ChatWindow","localStorage","window","text","isOwnMessage","messages","setMessages","UserPage","props","handleSendMessage","newMessageText","newMessage","setState","prevState","toggleModal","showModal","state","reload","bind","addFormSelected","updateFormSelected","deleteFormSelected","collapseForm","tableData","isLoaded","errorStatus","error","notification","selectedDate","Date","energyData","stompClient","fetchPersons","connectWebSocket","disconnect","socket","over","currentUserId","getItem","connect","frame","subscribe","body","userId","id","getEnergyMetersByUserId","result","status","err","console","log","role","size","offset","Component"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nimport * as API_EM from \"./api/em-api\"\r\nimport * as API_DATA from \"./api/consumption-api\"\r\nimport EnergyMeterTable from './components/em-table';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport ChatWindow from \"../commons/chat/chat-window\";\r\n\r\nconst localStorage = window.localStorage;\r\n\r\nconst [messages, setMessages] = useState([\r\n    { text: 'Hey', isOwnMessage: false },\r\n    { text: 'Hello', isOwnMessage: true }\r\n]);\r\nclass UserPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.reload = this.reload.bind(this);\r\n        this.state = {\r\n            addFormSelected: false,\r\n            updateFormSelected: false,\r\n            deleteFormSelected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n            notification: '',\r\n            showModal: false,\r\n            selectedDate: new Date(),\r\n            energyData: [],\r\n            messages: [\r\n                { text: 'Hey', isOwnMessage: false },\r\n                { text: 'Hello', isOwnMessage: true }\r\n            ],\r\n        };\r\n        this.stompClient = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons();\r\n        this.connectWebSocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.stompClient) {\r\n            this.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    // handleDateChange = (date) => {\r\n    //     this.setState({\r\n    //         selectedDate: date\r\n    //     }, () => {\r\n    //         this.fetchEnergyData();\r\n    //     });\r\n    // };\r\n    handleSendMessage = (newMessageText) => {\r\n        const newMessage = { text: newMessageText, isOwnMessage: true };\r\n        this.setState(prevState => ({\r\n            messages: [...prevState.messages, newMessage]\r\n        }));\r\n\r\n        // TODO: Send the message to the server or through WebSocket\r\n    };\r\n\r\n    connectWebSocket() {\r\n        const socket = new SockJS('http://localhost:8082/ws');\r\n        this.stompClient = Stomp.over(socket);\r\n        const currentUserId = localStorage.getItem('id');\r\n\r\n        this.stompClient.connect({}, frame => {\r\n            this.stompClient.subscribe('/topic/user.' + currentUserId, notification => {\r\n                this.setState({\r\n                    notification: notification.body,\r\n                    showModal: true\r\n                });\r\n\r\n            });\r\n        });\r\n    }\r\n\r\n    fetchPersons() {\r\n        const userId = localStorage.id;\r\n\r\n        return API_EM.getEnergyMetersByUserId(userId, (result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                console.log(result)\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: err\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    // fetchEnergyData = () => {\r\n    //     const { selectedDate } = this.state;\r\n    //     const userId = localStorage.getItem('id');\r\n    //     const formattedDate = selectedDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD\r\n    //\r\n    //     API_DATA.getEnergyDataByUserIdAndDate(userId, formattedDate, (result, status, err) => {\r\n    //         // Assume the API returns an array of objects with 'hour' and 'value' keys\r\n    //         if (result !== null && status === 200) {\r\n    //             const dataForChart = Object.entries(result).map(([hour, value]) => {\r\n    //                 return { hour, value };\r\n    //             });\r\n    //             console.log(dataForChart)\r\n    //             this.setState({\r\n    //                 energyData: dataForChart\r\n    //             });\r\n    //         } else {\r\n    //             // Handle errors\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false\r\n        });\r\n        this.fetchPersons();\r\n    }\r\n\r\n    toggleModal = () => {\r\n        this.setState({ showModal: !this.state.showModal });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {localStorage.role !== \"ROLE_CLIENT\" && <Redirect to=\"/login\" push/>}\r\n\r\n                    <Modal isOpen={this.state.showModal} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}>Notification</ModalHeader>\r\n                        <ModalBody>\r\n                            {this.state.notification}\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                    <CardHeader>\r\n                        <strong> Energy Meters </strong>\r\n                    </CardHeader>\r\n                    <Card>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                {this.state.isLoaded && <EnergyMeterTable  tableData = {this.state.tableData}/>}\r\n                                {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                                                errorStatus={this.state.errorStatus}\r\n                                                                error={this.state.error}\r\n                                                            />   }\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n                <ChatWindow\r\n                    chatWith={'admin'}\r\n                    messages={messages}\r\n                    onSendMessage={this.handleSendMessage}\r\n                />\r\n\r\n                {/*<div>*/}\r\n                {/*    <DatePicker*/}\r\n                {/*        selected={this.state.selectedDate}*/}\r\n                {/*        onChange={this.handleDateChange}*/}\r\n                {/*    />*/}\r\n                {/*    {}*/}\r\n                {/*    <LineChart width={700} height={300} data={this.state.energyData}>*/}\r\n                {/*        <CartesianGrid stroke=\"#ccc\" />*/}\r\n                {/*        <XAxis dataKey=\"hour\" />*/}\r\n                {/*        <YAxis/>*/}\r\n                {/*        /!*<Tooltip />*!/*/}\r\n                {/*        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />*/}\r\n                {/*    </LineChart>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default UserPage;\r\n"]},"metadata":{},"sourceType":"module"}