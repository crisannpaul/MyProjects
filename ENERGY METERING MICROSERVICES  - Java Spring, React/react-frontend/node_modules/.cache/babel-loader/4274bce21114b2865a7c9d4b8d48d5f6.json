{"ast":null,"code":"import _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\person\\\\components\\\\users-management\\\\add-user-form.js\";\nimport React from 'react';\nimport validate from \"../validators/user-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../../api/admin-api\";\nimport APIResponseErrorMessage from \"../../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar AddUsersForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddUsersForm, _React$Component);\n\n  function AddUsersForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddUsersForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddUsersForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 4\n          }\n        },\n        email: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            emailValidator: true\n          }\n        },\n        password: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 4\n          }\n        },\n        role: {\n          value: '',\n          placeholder: 'ROLE_CLIENT / ROLE ADMIN',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddUsersForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"insertUser\",\n    value: function insertUser(user) {\n      var _this2 = this;\n\n      return API_USERS.insertUser(user, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var user = {\n        username: this.state.formControls.username.value,\n        email: this.state.formControls.email.value,\n        password: this.state.formControls.password.value,\n        role: this.state.formControls.role.value\n      };\n      console.log(user);\n      this.insertUser(user);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"usernameameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        name: \"username\",\n        id: \"usernamenameField\",\n        placeholder: this.state.formControls.username.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.username.value,\n        touched: this.state.formControls.username.touched ? 1 : 0,\n        valid: this.state.formControls.username.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), this.state.formControls.username.touched && !this.state.formControls.username.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \" * Username must have at least 4 characters \")), React.createElement(FormGroup, {\n        id: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"emailField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \" Email: \"), React.createElement(Input, {\n        name: \"email\",\n        id: \"emailField\",\n        placeholder: this.state.formControls.email.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.email.value,\n        touched: this.state.formControls.email.touched ? 1 : 0,\n        valid: this.state.formControls.email.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), this.state.formControls.email.touched && !this.state.formControls.email.valid && React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \" * Email must have a valid format\")), React.createElement(FormGroup, {\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"passwordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"passwordField\",\n        placeholder: this.state.formControls.password.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.password.value,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        valid: this.state.formControls.password.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), this.state.formControls.password.touched && !this.state.formControls.password.valid && React.createElement(\"div\", {\n        className: \"error-message row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \" * Password must have at least 4 characters \")), React.createElement(FormGroup, {\n        id: \"role\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"roleField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \" Role: \"), React.createElement(Input, {\n        name: \"role\",\n        id: \"roleField\",\n        placeholder: this.state.formControls.role.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.role.value,\n        touched: this.state.formControls.role.touched ? 1 : 0,\n        valid: this.state.formControls.role.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AddUsersForm;\n}(React.Component);\n\nexport default AddUsersForm;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\person\\components\\users-management\\add-user-form.js"],"names":["React","validate","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","AddUsersForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","username","placeholder","minLength","email","emailValidator","password","role","handleSubmit","collapseForm","user","insertUser","result","status","console","log","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"../validators/user-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../../api/admin-api\";\r\nimport APIResponseErrorMessage from \"../../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass AddUsersForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 4,\r\n                    }\r\n                },\r\n                email: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        emailValidator: true\r\n                    }\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 4,\r\n                    }\r\n                },\r\n                role: {\r\n                    value: '',\r\n                    placeholder: 'ROLE_CLIENT / ROLE ADMIN',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    insertUser(user) {\r\n        return API_USERS.insertUser(user, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let user = {\r\n            username: this.state.formControls.username.value,\r\n            email: this.state.formControls.email.value,\r\n            password: this.state.formControls.password.value,\r\n            role: this.state.formControls.role.value\r\n        };\r\n\r\n        console.log(user);\r\n        this.insertUser(user);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='username'>\r\n                    <Label for='usernameameField'> Username: </Label>\r\n                    <Input name='username' id='usernamenameField' placeholder={this.state.formControls.username.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.username.value}\r\n                           touched={this.state.formControls.username.touched? 1 : 0}\r\n                           valid={this.state.formControls.username.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.username.touched && !this.state.formControls.username.valid &&\r\n                    <div className={\"error-message row\"}> * Username must have at least 4 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='email'>\r\n                    <Label for='emailField'> Email: </Label>\r\n                    <Input name='email' id='emailField' placeholder={this.state.formControls.email.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.email.value}\r\n                           touched={this.state.formControls.email.touched? 1 : 0}\r\n                           valid={this.state.formControls.email.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.email.touched && !this.state.formControls.email.valid &&\r\n                    <div className={\"error-message\"}> * Email must have a valid format</div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='password'>\r\n                    <Label for='passwordField'> Password: </Label>\r\n                    <Input name='password' id='passwordField' placeholder={this.state.formControls.password.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.password.value}\r\n                           touched={this.state.formControls.password.touched? 1 : 0}\r\n                           valid={this.state.formControls.password.valid}\r\n                           required\r\n                    />\r\n                    {this.state.formControls.password.touched && !this.state.formControls.password.valid &&\r\n                    <div className={\"error-message row\"}> * Password must have at least 4 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='role'>\r\n                    <Label for='roleField'> Role: </Label>\r\n                    <Input name='role' id='roleField' placeholder={this.state.formControls.role.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.role.value}\r\n                           touched={this.state.formControls.role.touched? 1 : 0}\r\n                           valid={this.state.formControls.role.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default AddUsersForm;\r\n"]},"metadata":{},"sourceType":"module"}