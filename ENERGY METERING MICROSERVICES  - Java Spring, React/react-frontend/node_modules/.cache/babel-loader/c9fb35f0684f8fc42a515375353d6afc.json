{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\user-chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nvar UserChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserChatWindow, _React$Component);\n\n  function UserChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, UserChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserChatWindow).call(this, props));\n\n    _this.handleIncomingMessage = function (newMessage) {\n      var isOwnMessage = newMessage.sender === _this.state.sender; // Compare sender with current user\n\n      var formattedMessage = _objectSpread({}, newMessage, {\n        isOwnMessage: isOwnMessage\n      });\n\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [formattedMessage])\n        };\n      });\n\n      console.log(_this.state.messages);\n    };\n\n    _this.sendMessage = function (messageContent) {\n      var _this$state = _this.state,\n          stompClient = _this$state.stompClient,\n          sender = _this$state.sender;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          type: \"CHAT\",\n          content: messageContent,\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n\n        _this.handleIncomingMessage(chatMessage);\n\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.sendTyping = function () {\n      var _this$state2 = _this.state,\n          stompClient = _this$state2.stompClient,\n          sender = _this$state2.sender,\n          receiver = _this$state2.receiver;\n\n      if (stompClient && stompClient.connected) {\n        var typingMessage = {\n          type: \"TYPING\",\n          content: '',\n          sender: sender,\n          receiver: _this.state.receiver\n        };\n        stompClient.send(\"/app/user-typing\", {}, JSON.stringify(typingMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: [],\n      sender: props.sender,\n      receiver: 'admin'\n    };\n    return _this;\n  }\n\n  _createClass(UserChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        }); // Subscribe to receive messages\n\n\n        client.subscribe(\"/topic/users/\".concat(_this2.state.sender), function (message) {\n          console.log(message);\n          var newMessage = JSON.parse(message.body);\n\n          _this2.handleIncomingMessage(newMessage);\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var messages = this.state.messages;\n      return React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: this.state.receiver,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        onChange: this.sendTyping,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return UserChatWindow;\n}(React.Component);\n\nexport default UserChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\user-chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","UserChatWindow","props","handleIncomingMessage","newMessage","isOwnMessage","sender","state","formattedMessage","setState","prevState","messages","console","log","sendMessage","messageContent","stompClient","connected","chatMessage","type","content","receiver","send","JSON","stringify","sendTyping","typingMessage","socket","client","over","connect","subscribe","message","parse","body","disconnect","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\n\r\n\r\nclass UserChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n            sender: props.sender,\r\n            receiver: 'admin'\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            // Subscribe to receive messages\r\n            client.subscribe(`/topic/users/${this.state.sender}`, (message) => {\r\n                console.log(message)\r\n                const newMessage = JSON.parse(message.body);\r\n                this.handleIncomingMessage(newMessage)\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    handleIncomingMessage = (newMessage) => {\r\n        const isOwnMessage = newMessage.sender === this.state.sender; // Compare sender with current user\r\n\r\n        const formattedMessage = {\r\n            ...newMessage,\r\n            isOwnMessage: isOwnMessage\r\n        };\r\n\r\n        this.setState(prevState => ({\r\n            messages: [...prevState.messages, formattedMessage]\r\n        }));\r\n        console.log(this.state.messages)\r\n    };\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient, sender } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = {\r\n                type: \"CHAT\",\r\n                content: messageContent,\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            this.handleIncomingMessage(chatMessage)\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    sendTyping = () => {\r\n        const { stompClient, sender, receiver } = this.state;\r\n\r\n        if (stompClient && stompClient.connected) {\r\n            const typingMessage = {\r\n                type: \"TYPING\",\r\n                content: '',\r\n                sender: sender,\r\n                receiver: this.state.receiver,\r\n            };\r\n            stompClient.send(\"/app/user-typing\", {}, JSON.stringify(typingMessage));\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        const { messages } = this.state;\r\n\r\n        return (\r\n            <div className=\"chat-window\">\r\n                <ChatHeader chatWith={this.state.receiver} />\r\n                <MessageList messages={messages} />\r\n                <ChatInput onSendMessage={this.sendMessage} onChange={this.sendTyping}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserChatWindow;\r\n\r\n"]},"metadata":{},"sourceType":"module"}