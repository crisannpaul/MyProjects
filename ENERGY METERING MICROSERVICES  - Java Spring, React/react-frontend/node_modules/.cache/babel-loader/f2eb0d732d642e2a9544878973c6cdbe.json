{"ast":null,"code":"import _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\person\\\\components\\\\em-management\\\\map-user-em-form.js\";\nimport React from 'react';\nimport validate from \"../validators/user-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_EM_USER from \"../../api/users-em-api\";\nimport APIResponseErrorMessage from \"../../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar MapUserEmForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapUserEmForm, _React$Component);\n\n  function MapUserEmForm(props) {\n    var _this;\n\n    _classCallCheck(this, MapUserEmForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapUserEmForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      console.log(updatedControls);\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        emId: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false\n        },\n        userId: {\n          value: '',\n          placeholder: '...',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MapUserEmForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"mapUserEm\",\n    value: function mapUserEm(pair) {\n      var _this2 = this;\n\n      return API_EM_USER.mapUserToEm(pair, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var pair = {\n        emId: this.state.formControls.emId.value,\n        userId: this.state.formControls.userId.value\n      };\n      this.mapUserEm(pair);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"emId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"emIdField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \" Energy Meter ID: \"), React.createElement(Input, {\n        name: \"emId\",\n        id: \"emIdField\",\n        placeholder: this.state.formControls.emId.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.emId.value,\n        touched: this.state.formControls.emId.touched ? 1 : 0,\n        valid: this.state.formControls.emId.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"userId\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"userIdField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \" User ID: \"), React.createElement(Input, {\n        name: \"userId\",\n        id: \"userIdField\",\n        placeholder: this.state.formControls.userId.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.userId.value,\n        touched: this.state.formControls.userId.touched ? 1 : 0,\n        valid: this.state.formControls.userId.valid,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"  Submit \"))), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n        errorStatus: this.state.errorStatus,\n        error: this.state.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapUserEmForm;\n}(React.Component);\n\nexport default MapUserEmForm;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\person\\components\\em-management\\map-user-em-form.js"],"names":["React","validate","Button","API_EM_USER","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","MapUserEmForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","console","log","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","emId","placeholder","userId","handleSubmit","collapseForm","pair","mapUserToEm","result","status","mapUserEm","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"../validators/user-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_EM_USER from \"../../api/users-em-api\";\r\nimport APIResponseErrorMessage from \"../../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass MapUserEmForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                emId: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                userId: {\r\n                    value: '',\r\n                    placeholder: '...',\r\n                    valid: false,\r\n                    touched: false,\r\n                }\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        console.log(updatedControls)\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    mapUserEm(pair) {\r\n        return API_EM_USER.mapUserToEm(pair, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        const pair = {\r\n            emId: this.state.formControls.emId.value,\r\n            userId: this.state.formControls.userId.value\r\n        }\r\n        this.mapUserEm(pair);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='emId'>\r\n                    <Label for='emIdField'> Energy Meter ID: </Label>\r\n                    <Input name='emId' id='emIdField' placeholder={this.state.formControls.emId.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.emId.value}\r\n                           touched={this.state.formControls.emId.touched? 1 : 0}\r\n                           valid={this.state.formControls.emId.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup id='userId'>\r\n                    <Label for='userIdField'> User ID: </Label>\r\n                    <Input name='userId' id='userIdField' placeholder={this.state.formControls.userId.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.userId.value}\r\n                           touched={this.state.formControls.userId.touched? 1 : 0}\r\n                           valid={this.state.formControls.userId.valid}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default MapUserEmForm;\r\n"]},"metadata":{},"sourceType":"module"}