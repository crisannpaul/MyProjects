{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Stuff\\\\My Shit\\\\facultate\\\\an4\\\\SD\\\\Gitlab Docker Project Default\\\\react-frontend\\\\src\\\\commons\\\\chat\\\\admin-chat-window.js\";\nimport React from 'react';\nimport ChatHeader from './chat-header';\nimport MessageList from './message-list';\nimport ChatInput from './chat-input';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport UserChatWindow from \"./user-chat-window\";\nimport UserList from \"./user-list\";\nimport * as API_USERS from \"../../person/api/admin-api\";\n\nvar AdminChatWindow =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AdminChatWindow, _React$Component);\n\n  function AdminChatWindow(props) {\n    var _this;\n\n    _classCallCheck(this, AdminChatWindow);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminChatWindow).call(this, props));\n\n    _this.handleIncomingMessage = function (newMessage) {\n      var isOwnMessage = newMessage.sender === _this.state.sender; // Compare sender with current user\n\n      var formattedMessage = _objectSpread({}, newMessage, {\n        isOwnMessage: isOwnMessage\n      });\n\n      _this.setState(function (prevState) {\n        return {\n          messages: [].concat(_toConsumableArray(prevState.messages), [formattedMessage])\n        };\n      });\n\n      console.log(_this.state.messages);\n    };\n\n    _this.onSelectUser = function (user) {\n      _this.setState({\n        selectedUser: user\n      });\n    };\n\n    _this.sendMessage = function (messageContent) {\n      var _this$state = _this.state,\n          stompClient = _this$state.stompClient,\n          selectedUser = _this$state.selectedUser;\n\n      if (stompClient && stompClient.connected) {\n        var chatMessage = {\n          type: \"CHAT\",\n          content: messageContent,\n          sender: 'admin',\n          receiver: selectedUser\n        };\n        stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    _this.state = {\n      stompClient: null,\n      messages: [],\n      selectedUser: null,\n      users: null,\n      isLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(AdminChatWindow, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.fetchPersons();\n      var socket = new SockJS('http://localhost:8083/chat-socket');\n      var client = Stomp.over(socket);\n      client.connect({}, function () {\n        _this2.setState({\n          stompClient: client\n        }); // Subscribe to receive messages\n\n\n        client.subscribe('/topic/messages', function (message) {\n          var newMessage = JSON.parse(message.body);\n\n          _this2.handleIncomingMessage(newMessage);\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Disconnect the WebSocket\n      if (this.state.stompClient) {\n        this.state.stompClient.disconnect();\n      }\n    }\n  }, {\n    key: \"fetchPersons\",\n    value: function fetchPersons() {\n      var _this3 = this;\n\n      return API_USERS.getUsers(function (result, status, err) {\n        if (result !== null && status === 200) {\n          console.log(result);\n          var users = result.map(function (user) {\n            return {\n              id: user.id,\n              username: user.username\n            };\n          });\n\n          _this3.setState({\n            users: users,\n            isLoaded: true\n          });\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: err\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          selectedUser = _this$state2.selectedUser,\n          messages = _this$state2.messages;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, this.state.isLoaded && React.createElement(UserList, {\n        users: this.state.users,\n        onSelectUser: this.onSelectUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), selectedUser && React.createElement(\"div\", {\n        className: \"chat-window\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(ChatHeader, {\n        chatWith: selectedUser.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(MessageList, {\n        messages: messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(ChatInput, {\n        onSendMessage: this.sendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AdminChatWindow;\n}(React.Component);\n\nexport default AdminChatWindow;","map":{"version":3,"sources":["D:\\Stuff\\My Shit\\facultate\\an4\\SD\\Gitlab Docker Project Default\\react-frontend\\src\\commons\\chat\\admin-chat-window.js"],"names":["React","ChatHeader","MessageList","ChatInput","SockJS","Stomp","UserChatWindow","UserList","API_USERS","AdminChatWindow","props","handleIncomingMessage","newMessage","isOwnMessage","sender","state","formattedMessage","setState","prevState","messages","console","log","onSelectUser","user","selectedUser","sendMessage","messageContent","stompClient","connected","chatMessage","type","content","receiver","send","JSON","stringify","users","isLoaded","fetchPersons","socket","client","over","connect","subscribe","message","parse","body","disconnect","getUsers","result","status","err","map","id","username","errorStatus","error","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ChatHeader from './chat-header';\r\nimport MessageList from './message-list';\r\nimport ChatInput from './chat-input';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport UserChatWindow from \"./user-chat-window\";\r\nimport UserList from \"./user-list\";\r\nimport * as API_USERS from \"../../person/api/admin-api\";\r\n\r\nclass AdminChatWindow extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stompClient: null,\r\n            messages: [],\r\n            selectedUser: null,\r\n            users: null,\r\n            isLoaded: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons()\r\n\r\n        const socket = new SockJS('http://localhost:8083/chat-socket');\r\n        const client = Stomp.over(socket);\r\n\r\n        client.connect({}, () => {\r\n            this.setState({ stompClient: client });\r\n\r\n            // Subscribe to receive messages\r\n            client.subscribe('/topic/messages', (message) => {\r\n                const newMessage = JSON.parse(message.body);\r\n                this.handleIncomingMessage(newMessage);\r\n            });\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Disconnect the WebSocket\r\n        if (this.state.stompClient) {\r\n            this.state.stompClient.disconnect();\r\n        }\r\n    }\r\n\r\n    handleIncomingMessage = (newMessage) => {\r\n        const isOwnMessage = newMessage.sender === this.state.sender; // Compare sender with current user\r\n\r\n        const formattedMessage = {\r\n            ...newMessage,\r\n            isOwnMessage: isOwnMessage\r\n        };\r\n\r\n        this.setState(prevState => ({\r\n            messages: [...prevState.messages, formattedMessage]\r\n        }));\r\n        console.log(this.state.messages)\r\n    };\r\n\r\n    onSelectUser = (user) => {\r\n        this.setState({ selectedUser: user });\r\n    };\r\n\r\n    sendMessage = (messageContent) => {\r\n        const { stompClient, selectedUser } = this.state;\r\n        if (stompClient && stompClient.connected) {\r\n            const chatMessage = {\r\n                type: \"CHAT\",\r\n                content: messageContent,\r\n                sender: 'admin',\r\n                receiver: selectedUser,\r\n            };\r\n            stompClient.send(\"/app/send-message\", {}, JSON.stringify(chatMessage));\r\n        }\r\n    };\r\n\r\n    fetchPersons() {\r\n        return API_USERS.getUsers((result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                console.log(result);\r\n\r\n                const users = result.map(user => ({\r\n                    id: user.id,\r\n                    username: user.username\r\n                }));\r\n\r\n                this.setState({\r\n                    users: users,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { selectedUser, messages } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.isLoaded && <UserList users={this.state.users} onSelectUser={this.onSelectUser}/>}\r\n                {selectedUser && (\r\n                    <div className=\"chat-window\">\r\n                        <ChatHeader chatWith={selectedUser.username} />\r\n                        <MessageList messages={messages} />\r\n                        <ChatInput onSendMessage={this.sendMessage} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminChatWindow;\r\n"]},"metadata":{},"sourceType":"module"}